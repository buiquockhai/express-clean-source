const debug = require("debug")("literate-server:server");
const http = require("http");
const app = require("../src/app");
const db = require("../src/models");
const {
  SocketListener,
  SocketRoom,
  SocketEmitter,
} = require("../src/socket/keys");
const { socketInstance } = require("../src/socket/instance");
const { PORT, HOST } = require("../src/util/constraints");

app.set("port", PORT);

const server = http.createServer(app);

socketInstance.setIO(server);
let io = socketInstance.getIO();

io.on(SocketListener.connection, (socket) => {
  socket.on(SocketListener.clientSendCreateRoom, (roomId) => {
    console.log("** joined new room **", roomId);
    socket.join(roomId);
  });

  socket.on(SocketListener.clientSendSubmitExam, (data) => {
    socket.broadcast.emit(SocketEmitter.serverFeedbackSubmitExam, {
      message: "Giảng viên submit đề thi",
      description: data.examTitle,
    });
  });

  socket.on(SocketListener.clientSendRejectExam, (data) => {
    socket.broadcast.emit(SocketEmitter.serverFeedbackRejectExam, {
      target: data.target,
      message: "Đề thi bị quản trị viên từ chối",
      description: data.examTitle,
    });
  });

  socket.on(SocketListener.clientSendJoinRoom, (data) => {
    socket.join(data?.roomId);
    socket.to(data?.roomId).emit(SocketEmitter.serverFeedbackJoinRoom, {
      studentId: data.studentId,
    });
  });

  socket.on(SocketListener.clientAcceptJoinRoom, (data) => {
    socket.to(data?.roomId).emit(SocketEmitter.serverFeedbackAcceptJoinRoom, {
      roomId: data.roomId,
      userId: data.userId,
    });
  });
});

const onError = (error) => {
  if (error.syscall !== "listen") throw error;

  switch (error.code) {
    case "EACCES":
      console.error(PORT.toString() + " requires elevated privileges");
      process.exit(1);
    case "EADDRINUSE":
      console.error(PORT.toString() + " is already in use");
      process.exit(1);
    default:
      throw error;
  }
};

const onListening = () => {
  debug("Listening on " + PORT.toString());
};

const onPgConnection = () => {
  db.sequelize
    .authenticate()
    .then(() => console.log("🚀 Postgres: Connection Succeeded."))
    .catch((err) => console.error(err));
};

server.listen(PORT, HOST, onPgConnection);
server.on("error", onError);
server.on("listening", onListening);
